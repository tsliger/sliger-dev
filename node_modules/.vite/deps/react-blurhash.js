import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/react-blurhash/dist/esm/index.js
var l = __toESM(require_react());
var f2 = __toESM(require_react());

// node_modules/blurhash/dist/esm/index.js
var q = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "#", "$", "%", "*", "+", ",", "-", ".", ":", ";", "=", "?", "@", "[", "]", "^", "_", "{", "|", "}", "~"];
var x = (t) => {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    let n = t[r], l2 = q.indexOf(n);
    e = e * 83 + l2;
  }
  return e;
};
var f = (t) => {
  let e = t / 255;
  return e <= 0.04045 ? e / 12.92 : Math.pow((e + 0.055) / 1.055, 2.4);
};
var h = (t) => {
  let e = Math.max(0, Math.min(1, t));
  return e <= 31308e-7 ? Math.trunc(e * 12.92 * 255 + 0.5) : Math.trunc((1.055 * Math.pow(e, 0.4166666666666667) - 0.055) * 255 + 0.5);
};
var F = (t) => t < 0 ? -1 : 1;
var M = (t, e) => F(t) * Math.pow(Math.abs(t), e);
var d = class extends Error {
  constructor(e) {
    super(e), this.name = "ValidationError", this.message = e;
  }
};
var C = (t) => {
  if (!t || t.length < 6)
    throw new d("The blurhash string must be at least 6 characters");
  let e = x(t[0]), r = Math.floor(e / 9) + 1, n = e % 9 + 1;
  if (t.length !== 4 + 2 * n * r)
    throw new d(`blurhash length mismatch: length is ${t.length} but it should be ${4 + 2 * n * r}`);
};
var z = (t) => {
  let e = t >> 16, r = t >> 8 & 255, n = t & 255;
  return [f(e), f(r), f(n)];
};
var L = (t, e) => {
  let r = Math.floor(t / 361), n = Math.floor(t / 19) % 19, l2 = t % 19;
  return [M((r - 9) / 9, 2) * e, M((n - 9) / 9, 2) * e, M((l2 - 9) / 9, 2) * e];
};
var U = (t, e, r, n) => {
  C(t), n = n | 1;
  let l2 = x(t[0]), m2 = Math.floor(l2 / 9) + 1, b2 = l2 % 9 + 1, i = (x(t[1]) + 1) / 166, u2 = new Array(b2 * m2);
  for (let o2 = 0; o2 < u2.length; o2++)
    if (o2 === 0) {
      let a = x(t.substring(2, 6));
      u2[o2] = z(a);
    } else {
      let a = x(t.substring(4 + o2 * 2, 6 + o2 * 2));
      u2[o2] = L(a, i * n);
    }
  let c = e * 4, s = new Uint8ClampedArray(c * r);
  for (let o2 = 0; o2 < r; o2++)
    for (let a = 0; a < e; a++) {
      let y = 0, B = 0, R2 = 0;
      for (let w = 0; w < m2; w++)
        for (let P2 = 0; P2 < b2; P2++) {
          let G = Math.cos(Math.PI * a * P2 / e) * Math.cos(Math.PI * o2 * w / r), T = u2[P2 + w * b2];
          y += T[0] * G, B += T[1] * G, R2 += T[2] * G;
        }
      let V = h(y), I = h(B), E = h(R2);
      s[4 * a + 0 + o2 * c] = V, s[4 * a + 1 + o2 * c] = I, s[4 * a + 2 + o2 * c] = E, s[4 * a + 3 + o2 * c] = 255;
    }
  return s;
};
var j = U;

// node_modules/react-blurhash/dist/esm/index.js
var P = Object.defineProperty;
var R = Object.defineProperties;
var C2 = Object.getOwnPropertyDescriptors;
var m = Object.getOwnPropertySymbols;
var v = Object.prototype.hasOwnProperty;
var x2 = Object.prototype.propertyIsEnumerable;
var b = (e, s, t) => s in e ? P(e, s, { enumerable: true, configurable: true, writable: true, value: t }) : e[s] = t;
var h2 = (e, s) => {
  for (var t in s || (s = {}))
    v.call(s, t) && b(e, t, s[t]);
  if (m)
    for (var t of m(s))
      x2.call(s, t) && b(e, t, s[t]);
  return e;
};
var p = (e, s) => R(e, C2(s));
var g = (e, s) => {
  var t = {};
  for (var r in e)
    v.call(e, r) && s.indexOf(r) < 0 && (t[r] = e[r]);
  if (e != null && m)
    for (var r of m(e))
      s.indexOf(r) < 0 && x2.call(e, r) && (t[r] = e[r]);
  return t;
};
var o = class extends f2.PureComponent {
  constructor() {
    super(...arguments);
    this.canvas = null;
    this.handleRef = (t) => {
      this.canvas = t, this.draw();
    };
    this.draw = () => {
      let { hash: t, height: r, punch: n, width: a } = this.props;
      if (this.canvas) {
        let i = j(t, a, r, n), c = this.canvas.getContext("2d"), d2 = c.createImageData(a, r);
        d2.data.set(i), c.putImageData(d2, 0, 0);
      }
    };
  }
  componentDidUpdate() {
    this.draw();
  }
  render() {
    let i = this.props, { hash: t, height: r, width: n } = i, a = g(i, ["hash", "height", "width"]);
    return f2.createElement("canvas", p(h2({}, a), { height: r, width: n, ref: this.handleRef }));
  }
};
o.defaultProps = { height: 128, width: 128 };
var D = { position: "absolute", top: 0, bottom: 0, left: 0, right: 0, width: "100%", height: "100%" };
var u = class extends l.PureComponent {
  componentDidUpdate() {
    if (this.props.resolutionX <= 0)
      throw new Error("resolutionX must be larger than zero");
    if (this.props.resolutionY <= 0)
      throw new Error("resolutionY must be larger than zero");
  }
  render() {
    let w = this.props, { hash: s, height: t, width: r, punch: n, resolutionX: a, resolutionY: i, style: c } = w, d2 = g(w, ["hash", "height", "width", "punch", "resolutionX", "resolutionY", "style"]);
    return l.createElement("div", p(h2({}, d2), { style: p(h2({ display: "inline-block", height: t, width: r }, c), { position: "relative" }) }), l.createElement(o, { hash: s, height: i, width: a, punch: n, style: D }));
  }
};
u.defaultProps = { height: 128, width: 128, resolutionX: 32, resolutionY: 32 };
export {
  u as Blurhash,
  o as BlurhashCanvas
};
//# sourceMappingURL=react-blurhash.js.map
